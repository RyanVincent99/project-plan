services:
  # Service 1: Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8080/api
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      # This new variable tells Next.js where to find the backend via the proxy
      NEXT_PUBLIC_API_URL: "/api/backend"
      NEXT_PUBLIC_BACKEND_URL: "http://backend:8080"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started

  # Service 2: Spring Boot Backend
  backend:
    build:
      context: ./backend  # Points to your new backend folder
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      # Pass database credentials to Spring Boot
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/project_plan
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER} # Reads from your .env
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD} # Reads from your .env
      # Pass OAuth credentials to Spring Boot
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy

  # Service 3: PostgreSQL Database
  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Reads from your .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Reads from your .env
      POSTGRES_DB: ${POSTGRES_DB} # Reads from your .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data: